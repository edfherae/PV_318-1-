//IntroductionToOOP
#include<iostream>
using namespace std;

//Создавая структуру или класс мы создаем новый тип данных
class Point
{
	double x;
	double y;
public:
	double get_x()const
	{
		//x = -2;	//must be a modieble l-value
		return x;
	}
	double get_y()const
	{
		return y;
	}
	void set_x(double x)
	{
		this->x = x;
	}
	void set_y(double y)
	{
		this->y = y;
	}
};

//#define STRUCT_POINT

void main()
{
	setlocale(LC_ALL, "");

#ifdef STRUCT_POINT
	cout << "Hello OOP" << endl;
	int a;	//Объявление переменной 'a' типа 'int'
	Point A;//Объявление переменной 'A' типа 'Point'
			//Создание объекта 'A' структуры 'Point'
			//Создание экземпляра 'A' структуры 'Point'

	cout << sizeof(A) << endl;
	cout << sizeof(Point) << endl;

	A.x = 2;
	A.y = 3;
	cout << A.x << "\t" << A.y << endl;

	Point* pA = &A;	//Pointer to 'A'
	cout << pA->x << "\t" << pA->y << endl;
#endif // STRUCT_POINT

	Point A;
	A.set_x(2);
	A.set_y(3);
	cout << A.get_x() << "\t" << A.get_y() << endl;
}

/*
------------------------------------------------
.  - Оператор прямого доступа (Point operator)
	 Используется для доступа к полям объекта по имени объекта.
-> - Оператор косвенного доступа (Arrow operator)
	 Используется для доступа к полям объекта по адресу объекта.
------------------------------------------------
*/

/*
------------------------------------------------
			OOP concepts
1. Инкапсуляция (Encapsulation) - это сокрытие определенной части класса от внешнего мира;
	Модификаторы доступа:
		private:	закрытые поля, к ним можно получить доступ только внутри класса;
		public:		открытые поля, к ним можно получить доступ откуда угодно;
		protected:	защищенные поля. Этот модификатор доступа используется только при наследовании.
					protected-поля доступны внутри нашего класса, и его дочерних классов.

		get/set-методы позволяеют получить доступ к закрытым переменным в классе.
		get (взять, получить) методы	- открывают доступ к закрытым переменным на чтение,
										  т.е., позволяют ВЗЯТЬ(ПОЛУЧИТЬ) значение закрытой переменной;
		set (задать, установить) методы - открывают доступ к закрытым переменным на запись,
										  т.е., позволяют задать значения закрытых переменных.
										  Кроме того, set-методы обеспечиваю фильтрацию данных,
										  т.е., предотвращают попадание некорректных значений
										  в переменные члены класса.

2. Наследование (Inheritance);
3. Полиморфизм  (Polymorphism);
------------------------------------------------
*/